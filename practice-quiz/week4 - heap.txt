Q1.Dynamic median.
Design a data type that supports insert in logarithmic time, find-the-median in constant time, and remove-the-median in logarithmic time.

A1.
Keep two heaps: a max oriented heap for the bellow to the median elements (left) and a  min oriented for the above of the median elements (right).
An extra variable for the median. To be consistent the num of elements to the left must be equal to the num of elements in the right (with tolerance os + - 1).
When inserting a new value check if it is greater then median, if so insert to right heap. Insert to he left otherwise.
If the size of the right heap gets greater + 1 of the left heap rotate left:
left.insert(median)
mediam = right.getMax()

rotate right otherwise:
right.insert(median)
median = left.getMin()

code:
class DynamicMedian {

    Integer median;
    MinPQ<Integer> right
    MaxPQ<Integer> left

    public DynamicMedian() {
        right = new MinPQ<>()
        left = new MaxPQ<>()
    }

    void insert(int val) {

        if (median == null) {
            median = val
        } else if (val > median) {

            right.insert(val)

            if (right.size() > left.size() + 1) {
                rotateLeft()
            }
        } else {

            left.insert(val)

            if (left.size() > right.size() + 1) {
                rotateRight()
            }
        }
    }

    private void rotateLeft() {
        left.insert(median)
        median = right.delMin()
    }

    private void rotateRight() {
        right.insert(median)
        median = left.delMax()
    }

    int peek() {
        median
    }

    int delMedian() {

        int tmp = median
        if (left.size() > right.size()) {
            median = left.delMax()
        } else {
            median = right.delMin()
        }

        return tmp
    }
}


Q2.Randomized priority queue.
Describe how to add the methods sample() and delRandom() to our binary heap implementation.
The two methods return a key that is chosen uniformly at random among the remaining keys, with the latter method also removing that key.
The sample() method should take constant time;
the delRandom() method should take logarithmic time.
Do not worry about resizing the underlying array.

A2.
Consider that the binary heap is impemented in an array. For sampling just pick a random number from 0 to N-1 and return it.
For removing a random element, pick a random number and swap it with the last element in the heap.
Remove the last element, that will be the returned and removed element.
Apply the sink operation in the swaped element so it can be placed in its right position

Q3.Taxicab numbers.
A taxicab number is an integer that can be expressed as the sum of two cubes of integers in two different ways: a^3+b^3=c^3+d^3.
For example, 1729=9^3+10^3=1^3+12^3.
Design an algorithm to find all taxicab numbers with a, b, c, and d less than n.

Version 1: Use time proportional to n2logn and space proportional to n2.
Version 2: Use time proportional to n2logn and space proportional to n.

A3.
Version 1:

Combine all values of n 2 by 2 (with no repetition: a^3 + b^3 = b^3 + a^3) and store the sums of its cubes in a max ordered binary heap (actually it doesnt matter, it could be a min heap)
Remove all elements from the heap. Because of the heap structure the elements will be removed in descending order.
Every time two equals numbers are removed they will be taxicab numbers. Store this numbers in a list and return it.

Impl Version 1:

heap = new maxHeap()
for(int a=0; a<n; a++){
    for(int b = a+1; b<n; b++){
           heap.insert( a^3 + b^3 )
    }
}

int last = heap.delMax()
List taxicabNumbers = new List()
while(heap.size() > 0){
    int current = heap.delMax()
    if(current == last && current != taxicabNumbers.last()){
        taxicabNumbers.add(last)
    }
    last = current
}

return taxicabNumbers