Q1. Queue with two stacks.
Implement a queue with two stacks so that each queue operations takes a constant amortized number of stack operations.

A1.
Consider one stack for queue operation (in) and another one for dequeue operation (out).
For the queue operation push the new item in the in stack.
For dequeue, pop all itens from in to out if out is empty. Then pop out.

Stack in = new Stack()
Stack out = new Stack()

void queue(val) {
    in.push(val)
}

def dequeue() {
    if(out.isEmpty()){
        while(!in.isEmpty()){
            out.push(in.pop());
        }
    }
    return out.pop();
}

Every item will be pushed and pop twice in each stack. If the stacks implements constant time for push and pop then the resulting
number of operations will be constant as well.

Q2. Stack with max.
Create a data structure that efficiently supports the stack operations (push and pop) and also a return-the-maximum operation.
Assume the elements are reals numbers so that you can compare them.

A2.

Q3. Java generics.
Explain why Java prohibits generic array creation.

A3.